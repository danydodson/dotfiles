#!/usr/bin/env bash

# Re-encode video file

ffmpeg -i "$1" -c:v libx264 -preset medium -crf 24 -c:a aac -b:a 128k "$2-2.mp4"

# # High Quality
# ffmpeg -i input.mp4 -c:v libx264 -preset slower -crf 18 -c:a copy output.mp4

# # Lossless
# ffmpeg -i input.mov -c:v libx264 -crf 0 output.mp4

# # Deinterlace
# ffmpeg -i input.mp4 -vf yadif output.mp4

# # Output to 60fps
# ffmpeg -i input.mp4 -vf "setpts=0.5*PTS" -r 60 output.mp4

# # High Frame Rate Slow Motion
# ffmpeg -i input.mp4 -filter:v "minterpolate=fps=240:mi_mode=mci:mc_mode=aobmc:me_mode=bidir:vsbmc=1, setpts=4.0*PTS",scale=1920:1080:flags=lanczos -an -c:v libx264 -preset faster -crf 18 output_slowmotion.mp4

# # Thumbnails (Extract 1 per sec in 10-20s range)
# ffmpeg -ss 00:00:10 -to 00:00:20 -i input.mp4 -vf "fps=1" -qscale:v 2 "thumb%04d.jpg"

# ### Extract all frames
# ffmpeg -i input.mp4 frame%04d.png

# # Create Single Frame
# ffmpeg -ss 00:00:10 -i input.mp4 -vframes 1 frame.png

# # Create lossless PNG frame
# ffmpeg -ss 00:00:10 -i input.mp4 -vframes 1 -f image2 -vcodec png frame_lossless.png

# # Download M3U8 Stream
# ffmpeg -i "http://example.com/stream.m3u8" -c copy -bsf:a aac_adtstoasc output.mp4

# # Record Screencast
# ffmpeg -f x11grab -r 25 -s 1280x720 -i :0.0 output_screencast.mkv

# # Live Stream
# ffmpeg -f alsa \
#   -ac 2 \
#   -i hw:0,0 \
#   -f x11grab \
#   -framerate 30 \
#   -video_size 1280x720 \
#   -i :0.0+0,0 \
#   -c:v libx264 \
#   -preset veryfast \
#   -b:v 1984k \
#   -maxrate 1984k \
#   -bufsize 3968k \
#   -vf "format=yuv420p" \
#   -g 60 \
#   -c:a aac \
#   -b:a 128k \
#   -ar 44100 \
#   -f flv rtmp://live.twitch.tv/app/stream_key

# # Natural Color Correction
# ffmpeg -i input.mp4 -vf "eq=brightness=0.15:contrast=1.3:saturation=0.9,colorbalance=rs=-0.1:gs=0.05:bs=0.05" -c:v libx264 -crf 18 -preset slow output_color_corrected.mp4

# # Tonemap HDR (BT.2020) to SDR (BT.709)
# ffmpeg -i file.mkv -vf "zscale=t=linear:npl=100,format=gbrpf32le,zscale=p=bt709,tonemap=tonemap=hable,zscale=t=bt709:m=bt709:r=tv,format=yuv420p" -crf 20 -acodec copy output_sdr.mkv

# # Change Video Metadata Title
# ffmpeg -i input.mp4 -metadata title="My New Video Title" -c copy output_with_title.mp4


# # High-Quality Encoding (H.264 / H.265)
# Utilize the Constant Rate Factor (CRF) for H.264/H.265 encoding, balancing quality and file size. Lower CRF values mean higher quality (0 is lossless, 23 is default, 18-20 is visually lossless). preset controls encoding speed vs. compression efficiency.

# # H.264 (libx264) with CRF 18 (visually lossless) and slower preset
# ffmpeg -i input.mp4 -c:v libx264 -preset slower -crf 18 -c:a copy output.mp4

# # H.265 (libx265) for better compression (iOS Airdrop compatible tag `hvc1`)
# ffmpeg -i input.mp4 -c:v libx265 -vtag hvc1 -preset medium -crf 24 -c:a copy output.mp4

# # Lossless H.264 encoding (very large files)
# ffmpeg -i input.mov -c:v libx264 -crf 0 output.mp4

