#!/usr/bin/env bash

# Gets macOS software, Homebrew and npm updates and cleans trash and logs.

. "$HOME/.dotfiles/tools/shell-reports/dot-reports.sh"

BIN_NAME=$(basename "$0")
COMMAND_NAME=$1
SUB_COMMAND_NAME=$2

sub_help() {
  echo "Usage: $BIN_NAME <command>"
  echo
  echo "Commands:"
  echo "   clean            Clean up caches (brew, cargo, gem, pip) and empty"
  echo "   dock             Apply macOS Dock settings"
  echo "   duti             Set default apps for file types (UTI)"
  echo "   edit             Open dotfiles in IDE ($VISUAL) and Git GUI ($VISUAL_GIT)"
  echo "   help             This help message"
  echo "   macos            Apply macOS system defaults"
  echo "   test             Run tests"
  echo "   update           Update packages and pkg managers (macOS, brew, casks, npm, yarn, cargo, pip3, gems)"
}

sub_clean() {
  info "$ brew cleanup..."
  brew cleanup --prune=all --scrub
  # info "$ nvim cleanup..."
  # rm -rf "${HOME}/.local/state/nvim"
  # find "${HOME}/.local/share/nvim" -mindepth 1 -maxdepth 1 ! -name "dadbod_ui" -exec rm -rf {} +
  # rm -rf "${HOME}/.cache/nvim"
  # info "$ pip cache purge..."
  # pip cache purge
  # info "$ emptying trash..."
  # command rm -rfv ~/.Trash/*
  # command rm -rfv /Volumes/*/.Trashes
  on_finish
}

function sub_update() {
  sudo -v
  info "$ softwareupdate..."
  sudo softwareupdate -i -a
  info "$ brew update..."
  brew update
  brew upgrade
  info "$ npm global update..."
  npm update -g
  on_finish
}

sub_edit() {
  sh -c "$VISUAL $DOTFILES"
  sh -c "$VISUAL_GIT $DOTFILES"
  finish
}

sub_test() {
  bats "$DOTFILES"/tools/tests/*.bats
  finish
}

sub_duti() {
  "${DOTFILES}/macos/duti.sh"
  finish
}

sub_macos() {
  for DEFAULTS_FILE in "${DOTFILES}"/macos/defaults*.sh; do
    info "applying ${DEFAULTS_FILE}" && . "${DEFAULTS_FILE}"
  done
  info "done. some changes may require a logout/restart to take effect..."
  on_finish
}

sub_dock() {
  . "${DOTFILES}/macos/dock.sh" && info "dock reloaded..."
  on_finish
}

case $COMMAND_NAME in
"" | "-h" | "--help")
  sub_help
  ;;
*)
  shift
  sub_"${COMMAND_NAME}" "$@"
  if [ $? = 127 ]; then
    info "'$COMMAND_NAME' is not a known command or has errors." >&2
    sub_help
    exit 1
  fi
  ;;
esac
