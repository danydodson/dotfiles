#!/usr/bin/env bash

# Gets macOS software, Homebrew and npm updates and cleans trash and logs.

. "$HOME/.dotfiles/ansi/reports.sh"

BIN_NAME=$(basename "$0")
COMMAND_NAME=$1
SUB_COMMAND_NAME=$2

sub_help() {
  command "Usage: $BIN_NAME <command>"
  echo
  green "Commands:"
  echo "   clean            Clean up caches (brew) and empty trash"
  echo "   dock             Apply macOS Dock settings"
  echo "   duti             Set default apps for file types (UTI)"
  echo "   edit             Open dotfiles in IDE ($EDITOR) and Git GUI ($VISUAL_GIT)"
  echo "   help             This help message"
  echo "   macos            Apply macOS system defaults"
  echo "   update           Update packages and pkg managers (macOS, brew, casks, npm, yarn, cargo, pip3, gems)"
  echo
  green "Scripts: $BIN_NAME install <scripts>"
  echo "   codium           Runs codium.sh installer script from dotfiles"
  echo "   conda            Runs conda.sh installer script from dotfiles"
  echo "   gh               Runs gh.sh installer script from dotfiles"
  echo "   go               Runs go.sh installer script from dotfiles"
  echo "   nvim             Runs nvim.sh installer script from dotfiles"
  echo "   repos            Runs repos.sh installer script from dotfiles"
  echo "   ssh              Runs ssh.sh installer script from dotfiles"
  echo "   tmux             Runs tmux.sh installer script from dotfiles"
}

function sub_update() {
  sudo -v
  info "$ softwareupdate..."
  sudo softwareupdate -i -a

  info "$ brew update..."
  brew update --force
  brew upgrade
  brew doctor

  on_finish
}

sub_edit() {
  cd "$DOTFILES" && sh -c "VIMINIT="" nvim ."
  # sh -c "$VISUAL_GIT $DOTFILES"
  finish
}

sub_duti() {
  "${DOTFILES}/macos/duti.sh"

  finish
}

sub_macos() {
  for DEFAULTS_FILE in "${DOTFILES}"/macos/defaults*.sh; do
    info "applying ${DEFAULTS_FILE}" && . "${DEFAULTS_FILE}"
  done

  info "done. some changes may require a logout/restart to take effect..."

  on_finish
}

sub_clean() {
  info "$ brew cleanup..."
  brew cleanup --prune=all --scrub

  # info "$ nvim cleanup..."
  # rm -rf "${HOME}/.cache/nvim"
  # rm -rf "${HOME}/.local/state/nvim"
  # find "${HOME}/.local/share/nvim" -mindepth 1 -maxdepth 1 ! -name "dadbod_ui" -exec rm -rf {} +

  info "$ emptying trash..."
  command rm -rfv ~/.Trash/*
  command rm -rfv /Volumes/*/.Trashes

  on_finish
}

sub_dock() {
  . "${DOTFILES}/macos/dock.sh" && info "dock reloaded..."
  on_finish
}

sub_codium() {
  . "${DOTFILES}/installers/codium.sh"
  on_finish
}

sub_conda() {
  . "${DOTFILES}/installers/conda.sh"
  on_finish
}

sub_gh() {
  . "${DOTFILES}/installers/gh.sh"
  on_finish
}

sub_go() {
  . "${DOTFILES}/installers/go.sh"
  on_finish
}

sub_nvim() {
  . "${DOTFILES}/installers/nvim.sh"
  on_finish
}

sub_repos() {
  . "${DOTFILES}/installers/repos.sh"
  on_finish
}

sub_ssh() {
  . "${DOTFILES}/installers/ssh.sh"
  on_finish
}

sub_tmux() {
  . "${DOTFILES}/installers/tmux.sh"
  on_finish
}

sub_install() {
  local installer="$1"
  case "$installer" in
  codium) sub_codium ;;
  conda) sub_conda ;;
  gh) sub_gh ;;
  go) sub_go ;;
  nvim) sub_nvim ;;
  repos) sub_repos ;;
  ssh) sub_ssh ;;
  tmux) sub_tmux ;;
  "" | "-h" | "--help")
    echo "Usage: $BIN_NAME install <codium|conda|gh|go|nvim|repos|ssh|tmux>"
    ;;
  *)
    echo "Unknown installer: $installer" >&2
    echo "Usage: $BIN_NAME install <codium|conda|gh|go|nvim|repos|ssh|tmux>"
    return 1
    ;;
  esac
}

case $COMMAND_NAME in
"" | "-h" | "--help")
  sub_help
  ;;
install)
  shift
  sub_install "$@"
  ;;
*)
  shift
  sub_"${COMMAND_NAME}" "$@"
  if [ $? = 127 ]; then
    info "'$COMMAND_NAME' is not a known command or has errors." >&2
    sub_help
    exit 1
  fi
  ;;
esac
