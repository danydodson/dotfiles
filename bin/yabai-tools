#!/usr/bin/env bash

# Yabai helper commands

. "$HOME/.dotfiles/ansi/feedback.sh"

# function: show help
help() {
    usage "Usage: yabai-tools.sh [command]"
    usage "Commands:"
    commands "    help               -- Show this help message"
    commands "    start              -- Start Yabai service"
    commands "    stop               -- Stop Yabai service"
    commands "    restart            -- Restart Yabai service"
    commands "    reload_config      -- Reload Yabai config"
    commands "    status             -- Show Yabai service status"
    commands "    update_yabai       -- Update Yabai"
    # info "  ——————————————————————————————————————————————"
    commands "    auto_arrange       -- Automatically arrange windows depending on their count. Use as signals for window create / destroy events"
    commands "    arrange [position] -- Move a floating window to [position] on current space"
    commands "    balance            -- Balance windows on current space"
    commands "    cycle              -- Cycle through windows"
    commands "    float              -- Float / unfloat active window"
    commands "    focus_space [NUM]  -- Focus space [NUM]"
    commands "    focus_win [DIR]    -- Focus window North | East | South | West"
    commands "    maximize           -- Make window full screen or move it back to grid"
    commands "    mirror             -- Mirror layout along X or Y axis"
    commands "    move [NUM]         -- Move active window to space [NUM]"
    commands "    resize [+|-]       -- Increase / decrease active window size"
    commands "    swap               -- Swap window positions"
    commands "    toggle_split       -- Toggle horizontal / vertical windows split"
    commands "    toggle_layout      -- Toggle stack / bsp layouts"
    # info "  ——————————————————————————————————————————————"
    usage "[Position]:"
    blue "    lefthalf"
    blue "    righthalf"
    blue "    tophalf"
    blue "    bottomhalf"
    blue "    topleft"
    blue "    bottomleft"
    blue "    topright"
    blue "    bottomright"
    blue "    center"
}

start() {
    info "Starting yabai..."
    yabai --start-service
}

stop() {
    info "Stopping yabai..."
    yabai --stop-service
}

restart() {
    info "Restarting yabai..."
    yabai --restart-service
}

reload_config() {
    info "Reloading yabai config..."
    # sid=$(yabai -m query --spaces index --space | jq -r '.index')

    source "${HOME}/.dotfiles/config/yabai/yabairc"
    # yabai -m space --focus $sid
}

status() {
    info "Checking yabai status..."
    yabai -m query --spaces
}

arrange() {
    case "$1" in
    "lefthalf")
        destination="1:2:0:0:1:1"
        ;;
    "righthalf")
        destination="1:2:1:0:1:1"
        ;;
    "tophalf")
        destination="2:1:0:0:1:1"
        ;;
    "bottomhalf")
        destination="2:1:0:1:1:1"
        ;;
    "topleft")
        destination="2:2:0:0:1:1"
        ;;
    "bottomleft")
        destination="2:2:0:1:1:1"
        ;;
    "topright")
        destination="2:2:1:0:1:1"
        ;;
    "bottomright")
        destination="2:2:1:1:1:1"
        ;;
    "center" | "")
        destination="5:5:1:1:3:3"
        ;;
    esac

    yabai -m window --grid "$destination"
    update_sketchybar

    info "Window moved to $1"
}

balance() {
    info "Balancing windows"
    yabai -m space --balance
}

cycle() {
    info "Cycling through windows on current space"
    yabai -m query --spaces index --space |
        jq -re ".index" |
        xargs -I{} yabai -m query --windows --space {} |
        jq -sre 'add | map(select(."is-minimized"==false)) | sort_by(.display, .frame.y, .frame.x, .id) | . as $array | length as $array_length | index(map(select(."has-focus"==true))) as $has_index | if $has_index > 0 then nth($has_index - 1).id else nth($array_length - 1).id end' |
        xargs -I{} yabai -m window --focus {}

    update_sketchybar
}

float() {
    windowInfo=$(yabai -m query --windows id,frame,app,is-floating --window)
    appName=$(info "$windowInfo" | jq -r '.app')
    isFloating=$(info "$windowInfo" | jq -r '."is-floating"')
    positionX="$(printf "%.0f" "$(info "$windowInfo" | jq -r '.frame.x')")"

    info "$windowInfo" | jq -er '"yabai -m window \(.id) --toggle float --resize top_left:\(.frame.w/40):\(.frame.h/40) --resize bottom_right:\(.frame.w/-40):\(.frame.h/-40)"' |
        sh -

    if [ "$isFloating" = "true" ] && [ "$positionX" -lt 500 ]; then
        yabai -m window --swap prev
    fi

    if [[ "$isFloating" = "false" ]]; then
        info "Floating $appName"
    else
        info "Moving $appName back to the grid"
    fi

    update_sketchybar
}

focus_space() {
    yabai -m space --focus "$1"

    info "Welcome to Space $1!"
}

focus_win() {
    yabai -m window --focus "$1" >/dev/null
}

maximize() {
    windowInfo=$(yabai -m query --windows app,has-fullscreen-zoom --window)

    yabai -m window --toggle zoom-fullscreen
    update_sketchybar

    appName=$(info "$windowInfo" | jq -r '.app')

    isFullScreen=$(info "$windowInfo" | jq -r '."has-fullscreen-zoom"')

    if [[ "$isFullScreen" = "false" ]]; then
        info "Making $appName full screen"
    else
        info "Moving $appName back to the grid"
    fi
}

mirror() {
    info "Mirroring windows"
    yabai -m space --mirror x-axis
    yabai -m space --mirror y-axis
}

move() {
    yabai -m window --space "$1" --focus
}

resize() {
    windowResizeAmount=100
    window=$(yabai -m query --windows split-type,split-child --window)
    splitType=$(info "$window" | jq -r '."split-type"')
    splitChild=$(info "$window" | jq -r '."split-child"')

    if [[ $1 = "+" ]]; then
        symbol="-"
    else
        symbol=
    fi

    if [[ $splitChild == "first_child" ]] && [[ $splitType == "vertical" ]]; then
        direction="right"
    elif [[ $splitChild == "second_child" ]] && [[ $splitType == "vertical" ]]; then
        direction="left"
    elif [[ $splitChild == "first_child" ]] && [[ $splitType == "horizontal" ]]; then
        direction="bottom"
    elif [[ $splitChild == "second_child" ]] && [[ $splitType == "horizontal" ]]; then
        direction="top"
    fi

    if [[ $splitType == "vertical" ]]; then
        resizeCommand="$direction:$symbol$windowResizeAmount:0"
    else
        resizeCommand="$direction:0:$symbol$windowResizeAmount"
    fi

    yabai -m window --resize "$resizeCommand"
}

swap() {
    info "Swapping window positions"
    window=$(yabai -m query --windows id --window last | jq '.id')

    while :; do
        yabai -m window "$window" --swap prev &>/dev/null
        if [[ $? -eq 1 ]]; then
            break
        fi
    done

    update_sketchybar
}

toggle_split() {
    info "Toggling horizontal / vertical split"
    yabai -m window --toggle split

    update_sketchybar
}

toggle_layout() {
    info "Toggling stack and bsp layouts"
    currentLayout=$(yabai -m query --spaces type --space | jq -r .type)
    [[ $currentLayout == "bsp" ]] && setToLayout="stack" || setToLayout="bsp"
    yabai -m space --layout "$setToLayout"
    info "Layout changed to $setToLayout"
    update_sketchybar
}

update_yabai() {
    # thanks to gldtn for this script
    # https://github.com/koekeishiya/yabai/discussions/1904#discussion-5730330

    function updatesudoers() {
        info "updating sudoers.d sha256"
        sha256=$(shasum -a 256 "$(which yabai)" | awk "{print \$1;}")
        if [ -f "/private/etc/sudoers.d/yabai" ]; then
            sudo sed -i '' -e 's/sha256:[[:alnum:]]*/sha256:'"${sha256}"'/' /private/etc/sudoers.d/yabai
            success "sudoers > yabai > sha256 hash update complete"
        else
            red "sudoers file does not exist yet, or could not be found."
            red "please create one before running this script."
        fi
    }

    # check & unpin yabai from brew
    if brew list --pinned | grep -q yabai; then
        brew unpin yabai
    fi

    info "stopping yabai.."
    yabai --stop-service
    brew upgrade yabai

    updatesudoers
    info "starting yabai..."
    sleep 2
    yabai --start-service

    # pin yabai back to brew
    brew pin yabai
    if brew list --pinned | grep -q yabai; then
        info "yabai pinned to brew"
    fi

    # success message
    sleep 1
    yabai_v=$(yabai --version)
    success "your running $yabai_v"
    success "yabai update completed successfully."

    ################ update from head ################

    # scripting-addition;
    # function to update sudoers file
    # function suyabai() {
    #     sha256=$(shasum -a 256 "$(which yabai)" | awk "{print \$1;}")
    #     if [ -f "/private/etc/sudoers.d/yabai" ]; then
    #         sudo sed -i '' -e 's/sha256:[[:alnum:]]*/sha256:'${sha256}'/' /private/etc/sudoers.d/yabai
    #         info "sudoers > yabai > sha256 hash update complete"
    #     else
    #         info "sudoers file does not exist yet. please create one before running this script."
    #     fi
    # }

    # # check & unpin yabai from brew
    # if brew list --pinned | grep -q yabai; then
    #     brew unpin yabai
    # fi

    # # set cert & stop yabai services
    # export yabai_cert=yabai-cert
    # info "stopping yabai.."
    # yabai --stop-service

    # # reinstall yabai & codesign
    # info "updating yabai.."
    # brew reinstall koekeishiya/formulae/yabai
    # codesign -fs "${yabai_cert:-yabai-cert}" "$(brew --prefix yabai)/bin/yabai"

    # # update sudoers file & start yabai
    # suyabai
    # info "starting yabai.."
    # yabai --start-service

    # # pin yabai back to brew
    # brew pin yabai
    # if brew list --pinned | grep -q yabai; then
    #     info "yabai pinned to brew"
    # fi

    # # success message
    # sleep 1
    # yabai_v=$(yabai --version)
    # info "your running $yabai_v"
    # info "yabai update completed successfully."
}

auto_arrange() {
    windows=$(yabai -m query --windows --display 1 | jq '[.[] | select(."is-visible"==true and ."is-floating"==false)] | length')

    # if [[ $windows == 0 ]]; then
    #   yabai -m config split_type vertical
    #   yabai -m space --padding abs:128:128:128:128
    #   yabai -m space --balance
    if [[ $windows == 1 || $windows == 2 ]]; then
        # yabai -m config split_type auto
        yabai -m space --padding abs:16:16:16:16
        yabai -m space --balance
    elif [[ $windows -gt 2 ]]; then
        # yabai -m config split_type auto
        yabai -m space --padding abs:0:0:0:0
    fi
}

update_sketchybar() {
    sketchybar --trigger update_yabai_icon
}

# dispatcher: call the appropriate function
if [[ $# -eq 0 ]]; then
    red "Error: no command provided."
    info ""
    help
    exit 1
fi

# check if the argument corresponds to a function
command=$1
if declare -f "$command" >/dev/null; then
    "$command" "${@:2}" # call the function and pass any additional arguments
else
    red "Error: '$command' is not a valid command."
    info ""
    help
    exit 1
fi
